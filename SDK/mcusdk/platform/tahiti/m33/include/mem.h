#ifndef _MCU_MEM_H_
#define _MCU_MEM_H_

#include "../../../src/include/autoconf.h"

#include "../../include/shared_mem.h"

/* Macros used for start and end addr */
#define REGION_LAST_ADDR(START, SIZE)       ((START) + (SIZE) -1)
#define REGION_START_BY_LIMIT(LIMIT)    ((LIMIT) + 1)
#define REGION_START_ALIGN(START,ALIGN) (START+ ( ((START)%(ALIGN)) ? (ALIGN-((START)%(ALIGN))) : 0 ) )

#define REGION_SIZE_LIMIT(BASE_ADDR,SIZE,END_OF_PHYS)  (((BASE_ADDR)+(SIZE))<(END_OF_PHYS)?(SIZE):((END_OF_PHYS)-(BASE_ADDR)))

#define AHB_M33_MEM_CODE_BASE_ADDR_S    AHB_PM_SRAM0_BASE_S
#define AHB_M33_MEM_CODE_BASE_ADDR_NS   AHB_PM_SRAM0_BASE_NS

#define AHB_HIFI3_IRAM_BASE_ADDR_S      AHB_HIFI3_IRAM_BASE_S

// The following would change depending on what is the last segment in M33's internal memory
#define M33_SRAM_END_S              ((AHB_M33_MEM_CODE_BASE_ADDR_S)+(AHB_PM_SRAM0_SIZE_S)+(AHB_PM_SRAM1_SIZE_S)+(AHB_PM_SRAM2_SIZE_S)+(AHB_PM_SRAM3_SIZE_S))
#define M33_SRAM_END_NS             ((AHB_M33_MEM_CODE_BASE_ADDR_NS)-(AHB_M33_MEM_CODE_BASE_ADDR_S)+(M33_SRAM_END_S))


// Secure Memory Map
#define CODE_DATA_START_S           ((AHB_M33_MEM_CODE_BASE_ADDR_S) + (CONFIG_M33_SECURE_CODE_SRAM_OFFSET))
#define CODE_DATA_SIZE_S            (CONFIG_M33_SECURE_CODE_SRAM_SIZE)
#define CODE_DATA_END_S             ((REGION_LAST_ADDR((CODE_DATA_START_S), (CODE_DATA_SIZE_S))))

#define CODE_LIVE_START_S           (CODE_DATA_START_S)
#define CODE_LIVE_SIZE_S            (AHB_PM_SRAM0_SIZE_S+AHB_PM_SRAM1_SIZE_S+AHB_PM_SRAM2_SIZE_S+AHB_PM_SRAM3_SIZE_S)

// Non-Secure Callable Memory Map
// The address must aligned to 32 bytes
#define NS_CALLABLE_CODE_DATA_START_S (REGION_START_ALIGN((CODE_DATA_START_S+CODE_DATA_SIZE_S),32))
#define NS_CALLABLE_CODE_DATA_SIZE_S  (CONFIG_M33_NON_SECURE_CALLABLE_CODE_SRAM_SIZE)
#define NS_CALLABLE_CODE_DATA_END_S   ((REGION_LAST_ADDR((NS_CALLABLE_CODE_DATA_START_S), (NS_CALLABLE_CODE_DATA_SIZE_S))))

// Non-Secure Memory Map
// The address must aligned to 256 bytes
#define VECTOR_START_NS             ((AHB_M33_MEM_CODE_BASE_ADDR_NS) - (AHB_M33_MEM_CODE_BASE_ADDR_S) + (REGION_START_ALIGN((NS_CALLABLE_CODE_DATA_START_S+NS_CALLABLE_CODE_DATA_SIZE_S),256)))

#define CODE_DATA_START_NS          (VECTOR_START_NS)
#define CODE_DATA_SIZE_NS           (CONFIG_M33_NONSECURE_CODE_SRAM_SIZE)
#define CODE_DATA_END_NS            (REGION_LAST_ADDR((CODE_DATA_START_NS), (CODE_DATA_SIZE_NS)))
#define CODE2_SIZE_NS               0x2900
#define CODE2_START_NS              (CODE_DATA_END_NS - CODE2_SIZE_NS)
#ifdef CONFIG_MEMORY_MAP_KATANA
#define CODE_DATA_SYSMEM_BASE       0x41501000
#define CODE_DATA_SYSMEM_SIZE       0xC7000
#else
#define CODE_DATA_SYSMEM_BASE       0x41500100
#define CODE_DATA_SYSMEM_SIZE       0x200
#endif

#define CODE_BOOT_START_S			(CONFIG_SECURE_SRAM_BASE_ADDRESS + CONFIG_M33_SECURE_BOOT_CODE_OFFSET)
#define CODE_BOOT_SIZE_S			(CONFIG_M33_SECURE_BOOT_CODE_SIZE)

// Secure ROM memory map
#define ROM_START_S                 ((AHB_MEMMAP_ROM_BASE_S + CONFIG_M33_ROM_BASE_ADDR_OFFSET_S))
#define ROM_SIZE_S                  ((CONFIG_M33_ROM_SIZE_S))
#define ROM_END_S                   ((REGION_LAST_ADDR(ROM_START_S, ROM_SIZE_S)))
#define ROM_SRAM_START_S            ((AHB_PM_SRAM3_BASE_S + CONFIG_M33_ROM_SRAM_BASE_ADDR_OFFSET_S))
#define ROM_SRAM_SIZE_S             ((CONFIG_M33_ROM_SRAM_SIZE_S))
#define ROM_SRAM_END_S              ((REGION_LAST_ADDR(ROM_SRAM_START_S, ROM_SRAM_SIZE_S)))

#define MCU_VIEW_LLEA_POWER_STATE_ADDR      (0x41004024)
#define MCU_VIEW_LLEB_POWER_STATE_ADDR      (0x41108090)

#endif // _MCU_MEM_H_
