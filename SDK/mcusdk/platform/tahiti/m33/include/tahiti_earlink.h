/*Generated by reggen.py(v0.53). Please do not edit this file. Synaptics. Inc(2018)*/
/* generated by      : ruhuan*/
/* generated from    : C:\Users\huangr1\Desktop\reg_gen\Tahiti_register_spec.docx*/
/* generated date    : 2019.01.02-16:56:01*/
/* Reg doc version   : v0.91*/

/**** This code is generated with following settings ****/
/* Reg Width                  : 32*/
/* Address Unit               : 8*/
/* C++ Types int              : hwint*/
/* Register map               : AHB*/
/* BigEndian                  : false*/
/* LittleEndian               : true*/
/*----------------------------------------------------------------------------------------- */

#ifndef MCU_EARLINK_HW_H
#define MCU_EARLINK_HW_H

#pragma pack(1)
#ifdef __cplusplus
  extern "C" {
#endif

/*MAIN MOUDLE BASE ADDR*/
#define EARLINK_TOP_COMMON_BASE_ADDR    EARLINK_TOP_COM_s_BASE_ADDRESS
#define EARLINK_TOP_SLV_BASE_ADDR       EARLINK_TOP_SLV_s_BASE_ADDRESS
#define EARLINK_TOP_MST_BASE_ADDR       EARLINK_TOP_MST_s_BASE_ADDRESS
#define EARLINK_PORT_BASE_ADDR	        EARLINK_PORT_s_BASE_ADDRESS
#define ADMA_BASE_ADDR					AUDIO_DMA_s_BASE_ADDRESS
#define EARLINK_SCRATCHPAD_BASE_ADDR	WRREG_CTRL0_ADDRESS
enum ADMA_CH{
	  ADMA_CH0 = 0,
	  ADMA_CH1,
	  ADMA_CH2,
	  ADMA_CH3,
	  ADMA_CH4,
	  ADMA_CH5,
	  ADMA_CH6,
	  ADMA_CH7,
	  ADMA_CH8,
	  ADMA_CH9,
	  ADMA_CH10,
	  ADMA_CH11,
	  ADMA_CH12,
	  ADMA_CH13,
	  ADMA_CH14,
	  ADMA_CH15,
	  ADMA_CH16,
	  ADMA_CH17,
	  ADMA_CH18,
	  ADMA_CH19,
};
  
enum adma_output_ch_function_assign {
	I2S0_TX_LEFT=0,
	I2S0_TX_RIGTH,
	I2S1_TX_LEFT,
	I2S1_TX_RIGHT,
	ELK_PORT0,
	ELK_PORT1,	
	ELK_PORT2,
	ELK_PORT3,
	HQ_INTERPOLATOR0,
	HQ_INTERPOLATOR1,
};

enum adma_input_ch_function_assign {
	I2S0_RX_LEFT=0,
	I2S0_RX_RIGTH,
	I2S1_RX_LEFT,
	I2S1_RX_RIGHT,
	ELK_PORT8,
	ELK_PORT9,	
	ELK_PORT10,
	ELK_PORT11,
	ELK_PORT12,
	LP_DEC0,
	LP_DEC1,
	LP_DEC2,
	LINEIN_DEC0,
	LINEIN_DEC1
};

enum adma_ssize {
	SS_8D24Z = 0x0,//8 bit data, 24 bit zero
	SS_8D8Z,//8b data, 8b zero, 8b data, 8b zero
	SS_16D16Z,//16b data, 16b zero
	SS_16D16D,//16b data, 16b data
	SS_24D8Z,//24b data, 8b zero
	REV,//reserved
	SS_32D//32b data
};
enum adma_burst {
	BURST_1=0,
	BURST_4
};

/*  ADMA channel offset start  */
#define ADMA_CH_OFF			0x8


#define ABIT(x)				(1<<x)
#define ADMA_CH1_INT			ABIT(0)
#define ADMA_CH3_INT			ABIT(1)
#define ADMA_CH5_INT			ABIT(2)
#define ADMA_CH7_INT			ABIT(3)
#define ADMA_CH9_INT			ABIT(4)
#define ADMA_CH11_INT			ABIT(5)
#define ADMA_CH13_INT			ABIT(6)
#define ADMA_CH15_INT			ABIT(7)
#define ADMA_CH17_INT			ABIT(8)
#define ADMA_CH19_INT			ABIT(9)
#define ADMA_CH0_INT			ABIT(10)
#define ADMA_CH2_INT			ABIT(11)
#define ADMA_CH4_INT			ABIT(12)
#define ADMA_CH6_INT			ABIT(13)
#define ADMA_CH8_INT			ABIT(14)
#define ADMA_CH10_INT			ABIT(15)
#define ADMA_CH12_INT			ABIT(16)
#define ADMA_CH14_INT			ABIT(17)
#define ADMA_CH16_INT			ABIT(18)
#define ADMA_CH18_INT			ABIT(19)

/*	command description start */
#define ASSIGN_ADDR_FIXED	0
#define ASSIGN_ADDR_INCR	1
#define REG_READ			2
#define READ_STATUS			3
#define REG_WRITE			4
#define BULK_WRITE			5
#define BULK_READ			6
#define BULK_STOP			7
/*	command description end  */

enum data_type {
	UNCHANGED_DATA = 0x0,
	STATIC0,
	STATIC1,
	PRBS,
	FIRST_BIT_DOUBLE,
	LAST_COLUMN0,
	LAST_COLUMN1,
	ASYNC_DATA
};
typedef struct {
	EARLINK_TIMING_CTRL0_s				Timing_Ctrl0__M_Wr_S;				//EARLINK_TIMING_CTRL0;    		//Master_Local->RW ; Master->Slave->RW ; Slave_local->R
	EARLINK_TIMING_CTRL1_s				Timing_Ctrl1__M_Wr_S;				//EARLINK_TIMING_CTRL1;			//Master_Local->RW ; Master->Slave->RW ; Slave_local->R 
	EARLINK_TIMING_CTRL2_s				Timing_Ctrl2__M_Wr_S;				//EARLINK_TIMING_CTRL2;			//Master_Local->RW ; Master->Slave->RW ; Slave_local->R	
	EARLINK_TIMING_CTRL3_s				Timing_Ctrl3__M_Wr_S;				//EARLINK_TIMING_CTRL3;			//Master_Local->RW ; Master->Slave->RW ; Slave_local->R
	EARLINK_CMD_BUF_CTRL_s				Cmd_Buf_Ctrl; 						//EARLINK_CMD_BUF_CTRL;			//Master_Local->RW ;    --- N/A ---    ; Slave_local->RW
	EARLINK_DEVICE_CTRL_s				Device_Ctrl;						//EARLINK_DEVICE_CTRL;			//Master_Local->RW ;    --- N/A ---    ; Slave_local->RW
	EARLINK_IRQ_TO_SYS_s				Irq_To_Sys_Sts_top;				//EARLINK_IRQ_TO_SYS;			//Master_Local->R/W1C ;    --- N/A ---    ; Slave_local->R/W1C  - top-level : non audio interrupt (crc, blk) intr
	EARLINK_IRQ_TO_SYS_ENABLE_s			Irq_To_Sys_Enable_top;				//EARLINK_IRQ_TO_SYS_ENABLE;	//Master_Local->RW ;    --- N/A ---    ; Slave_local->RW  
	EARLINK_PORT_IRQ_TO_SYS_s			Port_Irq_To_Sys_Sts_top;					//EARLINK_PORT_IRQ_TO_SYS;		//Master_Local->R/W1C ;    --- N/A ---    ; Slave_local->R/W1C 
	EARLINK_PORT_IRQ_TO_SYS_ENABLE_s	Port_Irq_To_Sys_Enable_top;				//EARLINK_PORT_IRQ_TO_SYS_ENABLE;//Master_Local->RW ;    --- N/A ---    ; Slave_local->RW  -- top-level : port irq enable for local system (port crc etc errors) - works with PORT_IRQ_TO_SYS_ENABLE
	EARLINK_COMMAND_CTRL_RX_BUF_s		Cmd_Rx_Buf;							//EARLINK_COMMAND_CTRL_RX_BUF;	//Master_Local->R ;     --- N/A ---    ; Slave_local->R  
	EARLINK_COMMAND_RX_DATA_s			Cmd_Rx_Data;						//EARLINK_COMMAND_RX_DATA;		//Master_Local->R ;     --- N/A ---    ; Slave_local->R  
	EARLINK_PORT_CLK_ENABLE_CONTROL_s	Port_Clk_Enable__M_Wr_S;			//EARLINK_PORT_CLK_ENABLE_CONTROL;//Master_Local->RW ; Master->Slave->RW ;  --- N/A ---
	EARLINK_DEVICE_ENABLE_s				Dev_Enable;							//EARLINK_DEVICE_ENABLE;		//Master_Local->RW ;    --- N/A ---    ; Slave_local->RW 
	EARLINK_TIMING_UPDATE_SYS_s			Timing_Update_Ctrl;					//EARLINK_TIMING_UPDATE_SYS;	//Master_Local->RW ;    --- N/A ---    ; Slave_local->RW
	EARLINK_PHY_CONIFG0_s				Phy_Cfg0;							//EARLINK_PHY_CONIFG;			//Master_Local->RW ;    --- N/A ---    ; Slave_local->RW
	EARLINK_PHY_CONIFG1_s				Phy_Cfg1;							//EARLINK_PHY_CONIFG;			//Master_Local->RW ;    --- N/A ---    ; Slave_local->RW
	EARLINK_PHY_TEST_s					Phy_Test;							//EARLINK_PHY_TEST;				//Master_Local->RW ;    --- N/A ---    ; Slave_local->RW
#ifdef CONFIG_CHIP_VERSION_A1
	hwint8 filler0[0x4];
	EARLINK_TEST_BUS_CFG_s				Test_Bus_Cfg;
	EARLINK_BUS_COLLISION_CFG_s			Bus_Collision_Cfg;
	EARLINK_DELAY_MEASUREMENT_s			Delay_Measurement;
	EARLINK_BULK_START_ADDR_RECORD_s	Bulk_Start_Addr_Record;
	EARLINK_BULK_FRAME_COUNT_RECORD_s	Bulk_Frame_Count_Record;
#endif
} EarLink_Common_s; //EARLINK_TOP_COM_s;

typedef struct {
	EARLINK_COMMAND_CTRL_TX_BUF_s		Cmd_Tx_Buf;							//EARLINK_COMMAND_CTRL_TX_BUF;	//Master_Local->RW ;    --- N/A ---    ;    --- N/A --- 
	EARLINK_COMMAND_TX_DATA_s			Cmd_Tx_Data;						//EARLINK_COMMAND_TX_DATA;		//Master_Local->RW ;    --- N/A ---    ;    --- N/A --- 
	EARLINK_AUDIO_SYNC_DIVIDER_s		Audio_Sync_Div;						//EARLINK_AUDIO_SYNC_DIVIDER;	//Master_Local->RW ;    --- N/A ---    ;    --- N/A --- 
} EarLink_Master_s;	//EARLINK_TOP_MST_s;

// mainly used for getting attention notification interrupt from slave to master
typedef struct {
	EARLINK_DEVICE_CTRL_SLAVE_ONLY_s	Slave_Dev_Ctrl;						//EARLINK_DEVICE_CTRL_SLAVE_ONLY;// --- N/A ---     ;   --- N/A ---     ; Slave_local->RW
	EARLINK_IRQ_TO_MASTER_s				Slave_Irq_To_Mst_Sts_top;				//EARLINK_IRQ_TO_MASTER;		// --- N/A ---     ; Master->Slave->RC ; Slave_local->R
	EARLINK_IRQ_TO_MASTER_ENABLE_s		Slave_Irq_To_Mst_Enable_top;					//EARLINK_IRQ_TO_MASTER_ENABLE;	// --- N/A ---     ; Master->Slave->RW ; Slave_local->R   -- top-level: attention to the master for blk, crc etc (non audio port)
	EARLINK_PORT_IRQ_TO_MASTER_s		Slave_Port_Err_Irq_To_Mst_Sts_top;				//EARLINK_PORT_IRQ_TO_MASTER;	// --- N/A ---     ; Master->Slave->R  ; Slave_local->R
	EARLINK_PORT_IRQ_TO_MASTER_ENABLE_s	Slave_Port_Err_Irq_To_Mst_Enable_top;		//EARLINK_PORT_IRQ_TO_MASTER_ENABLE;// --- N/A ---     ; Master->Slave->RW ; Slave_local->R   -- top-level: master enables the slave interrupt register to get attention interrupt automatically from slave
	EARLINK_TIMING_UPDATE_MASTER_s		Slave_Timing_Update_Ctrl__M_Wr_S;			//EARLINK_TIMING_UPDATE_MASTER;		// --- N/A ---     ; Master->Slave->RW ; Slave_local->R
} EarLink_Slave_s; //EARLINK_TOP_SLV_s;

typedef struct {
	BANK_SWITCH_REGISTER_PORT0_s  		Bank_Switch_Ctrl__M_Wr_S;			//BANK_SWITCH_REGISTER;			//Master_Local->RW ; Master->Slave->RW ; Slave_local->R
	ROW_COLUMN_CTRL_PORT0_s				Column_Ctrl__M_Wr_S;				//ROW_COLUMN_CTRL;				//Master_Local->RW ; Master->Slave->RW ; Slave_local->R
	PORT_CTRL_PORT0_s					Port_Ctrl__M_Wr_S;					//PORT_CTRL;					//Master_Local->RW ; Master->Slave->RW ; Slave_local->R
	PORT_ENABLE_PORT0_s					Port_Enable__M_Wr_S;				//PORT_ENABLE;					//Master_Local->RW ; Master->Slave->RW ; Slave_local->R		
	ROW_COLUMN_CTRL_SHADOW_PORT0_s		Shadow_Column_Ctrl__M_Wr_S;			//ROW_COLUMN_CTRL_SHADOW;		//Master_Local->RW ; Master->Slave->RW ; Slave_local->R
	PORT_CTRL_SHADOW_PORT0_s			Shadow_Port_Ctrl__M_Wr_S;			//PORT_CTRL_SHADOW;				//Master_Local->RW ; Master->Slave->RW ; Slave_local->R
	PORT_ENABLE_SHADOW_PORT0_s			Shadow_Port_Enable__M_Wr_S;			//PORT_ENABLE_SHADOW;			//Master_Local->RW ; Master->Slave->RW ; Slave_local->R
	PORT_FIFO_FLUSH_PORT0_s				Port_FIFO_Flush__M_Wr_S;			//PORT_FIFO_FLUSH;				//Master_Local->RW ; Master->Slave->RW ; Slave_local->R
	BULK_CRC_24B_PORT0_s				Blk_CRC_24B__M_R_S;					//BULK_CRC_24B;					//Master_Local->R  ; Master->Slave->R  ; Slave_local->R
	PORT_IRQ_TO_MASTER_PORT0_s			Slave_Port_Err_Irq_To_Mst_Sts;				//PORT_IRQ_TO_MASTER;			//  --- N/A ---    ; Master->Slave->R1C; Slave_local->R        //--
	PORT_IRQ_TO_MASTER_ENABLE_PORT0_s	Slave_Port_Err_Irq_To_Mst_Enable;			//PORT_IRQ_TO_MASTER_ENABLE;	//  --- N/A ---    ; Master->Slave->RW ; Slave_local->R		-- notification to master - report only the error condition (not the successful data transfer interrupt)
	PORT_IRQ_TO_SYS_PORT0_s				Port_Err_Irq_To_Sys_Sts;						//PORT_IRQ_TO_SYS;				//Master_Local->R/W1C; --- N/A ---     ; Slave_local->R (or W1C) //--
	PORT_IRQ_TO_SYS_ENABLE_PORT0_s		Port_Err_Irq_To_Sys_Enable;			//PORT_IRQ_TO_SYS_ENABLE;		//Master_Local->RW ; Master->Slave->RW ; Slave_local->R ??  -- local system - report only the error condition (not the successful data transfer interrupt)
	hwint8 filler0[0xc];
} EarLink_Port_s; //EARLINK_COM_PORT_s;

typedef struct {
	WRREG_CTRL0_s						ELK_Mst_Recv_Buf_Addr;
	WRREG_CTRL1_s						ELK_Slv_Recv_Buf_Addr;
	WRREG_CTRL2_s						ELK_Mst_Transmit_Buf_Addr;
	WRREG_CTRL3_s						ELK_Slv_Transmit_Buf_Addr;
} Earlink_ScratchPad_Reg_s;

#ifdef __cplusplus
  }
#endif
#pragma pack()

#endif//MCU_EARLINK_HW_H
